batrachia2Est <- estimateSkewNormal(minAge = 0.251, maxAge = 0.254, phy = archosauriaEst$apePhy, monoGroups = batrachia2)
plotMCMCtree(batrachia2Est$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
anuraEst <- estimateSkewNormal(minAge = 0.165, maxAge = 0.202, phy = batrachia1Est$apePhy, monoGroups = anura)
plotMCMCtree(anuraEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
caudataEst <- estimateSkewNormal(minAge = 0.147, maxAge = 0.175, phy = anuraEst$apePhy, monoGroups = caudata)
plotMCMCtree(caudataEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
gymnophiona1Est <- estimateSkewNormal(minAge = 0.056, maxAge = 0.146, phy = caudataEst$apePhy, monoGroups = gymnophiona1)
plotMCMCtree(gymnophiona1Est$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
gymnophiona1Est
batrachia2Est
gymnophiona1Est
tetrapodaEst <- estimateSkewNormal(minAge = 4.08, maxAge = 4.23, phy = tree, monoGroups = tetrapoda)
plotMCMCtree(tetrapodaEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
amniotaEst <- estimateSkewNormal(minAge = 3.37, maxAge = 3.51, phy = tetrapodaEst$apePhy, monoGroups = amniota)
plotMCMCtree(amniotaEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
synapsidaEst <- estimateSkewNormal(minAge = 3.18, maxAge = 3.33, phy = amniotaEst$apePhy, monoGroups = synapsida)
plotMCMCtree(synapsidaEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
archosauriaEst <- estimateSkewNormal(minAge = 2.56, maxAge = 2.96, phy = synapsidaEst$apePhy, monoGroups = archosauria)
plotMCMCtree(archosauriaEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
batrachia1Est <- estimateSkewNormal(minAge = 2.50, maxAge = 2.73, phy = archosauriaEst$apePhy, monoGroups = batrachia1)
plotMCMCtree(batrachia1Est$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
batrachia2Est <- estimateSkewNormal(minAge = 2.51, maxAge = 2.54, phy = archosauriaEst$apePhy, monoGroups = batrachia2)
plotMCMCtree(batrachia2Est$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
anuraEst <- estimateSkewNormal(minAge = 1.65, maxAge = 2.02, phy = batrachia1Est$apePhy, monoGroups = anura)
plotMCMCtree(anuraEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
caudataEst <- estimateSkewNormal(minAge = 1.47, maxAge = 1.75, phy = anuraEst$apePhy, monoGroups = caudata)
plotMCMCtree(caudataEst$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
gymnophiona1Est <- estimateSkewNormal(minAge = 0.56, maxAge = 1.46, phy = caudataEst$apePhy, monoGroups = gymnophiona1)
plotMCMCtree(gymnophiona1Est$parameters, method = 'skewNormal', upperTime = 0.5, title = 'blah')
tetrapodaEst <- estimateSkewNormal(minAge = 4.08, maxAge = 4.23, phy = tree, monoGroups = tetrapoda)
plotMCMCtree(tetrapodaEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
amniotaEst <- estimateSkewNormal(minAge = 3.37, maxAge = 3.51, phy = tetrapodaEst$apePhy, monoGroups = amniota)
plotMCMCtree(amniotaEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
synapsidaEst <- estimateSkewNormal(minAge = 3.18, maxAge = 3.33, phy = amniotaEst$apePhy, monoGroups = synapsida)
plotMCMCtree(synapsidaEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
archosauriaEst <- estimateSkewNormal(minAge = 2.56, maxAge = 2.96, phy = synapsidaEst$apePhy, monoGroups = archosauria)
plotMCMCtree(archosauriaEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
batrachia1Est <- estimateSkewNormal(minAge = 2.50, maxAge = 2.73, phy = archosauriaEst$apePhy, monoGroups = batrachia1)
plotMCMCtree(batrachia1Est$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
batrachia2Est <- estimateSkewNormal(minAge = 2.51, maxAge = 2.54, phy = archosauriaEst$apePhy, monoGroups = batrachia2)
plotMCMCtree(batrachia2Est$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
anuraEst <- estimateSkewNormal(minAge = 1.65, maxAge = 2.02, phy = batrachia1Est$apePhy, monoGroups = anura)
plotMCMCtree(anuraEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
caudataEst <- estimateSkewNormal(minAge = 1.47, maxAge = 1.75, phy = anuraEst$apePhy, monoGroups = caudata)
plotMCMCtree(caudataEst$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
gymnophiona1Est <- estimateSkewNormal(minAge = 0.56, maxAge = 1.46, phy = caudataEst$apePhy, monoGroups = gymnophiona1)
plotMCMCtree(gymnophiona1Est$parameters, method = 'skewNormal', upperTime = 5, title = 'blah')
gymnophiona1Est
q()
library(islandNeighbours)
q()
library(devtools)
install_github("anaserrasilva/islandNeighbours")
library(islandNeighbours)
cite(islandNeighbours)
citation("islandNeighbours")
install_github("anaserrasilva/islandNeighbours")
library(devtools)
install_github("anaserrasilva/islandNeighbours")
library(islandNeighbours)
citation("islandNeighbours")
q()
library('islandNeighbours')
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Allium\\Terraphy\\Allium\\strict.tre")
tree
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Asplenium\\Terraphy\\Asplenium\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Bats\\Terraphy\\Bats\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Caryophyllaceae\\Terraphy\\Caryophyllaceae\\strict.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Caryophyllaceae\\Terraphy\\Caryophyllaceae\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Chameleons\\Terraphy\\Chameleons\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree$edge
tree$Nnode
length(tree$edge.length) - Ntip(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Eucalyptus\\Terraphy\\Eucalyptus\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Euphorbia\\Terraphy\\Euphorbia\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Ficus\\Terraphy\\Ficus\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Iris\\Terraphy\\Iris\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Mammals\\Terraphy\\Mammals\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primates\\Terraphy\\Primates\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primula\\Terraphy\\Primula\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Ranunculus\\Terraphy\\Ranunculus\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Rhododendron\\Terraphy\\Rhododendron\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Rosaceae\\Terraphy\\Rosaceae\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Scincids\\Terraphy\\Scincids\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Solanum\\Terraphy\\Solanum\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Syzygium\\Terraphy\\Syzygium\\strict.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Allium\\Astral\\alliumGeneTrees_quartet_noQMs_collapsed.tre.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Asplenium\\Astral\\aspleniumGeneTrees_quartet_noQMs_collapsed.tre.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Asplenium\\Astral\\aspleniumGeneTrees_quartet_noQMs_collapsed.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Asplenium\\Astral\\aspleniumGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Bats\\Astral\\batsGeneTrees_quartet_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Caryophyllaceae\\Astral\\caryophyllaceaeGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Chameleons\\Astral\\chameleonsGeneTrees_quartetScore.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Eucalyptus\\Astral\\eucalyptusGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Euphorbia\\Astral\\euphorbiaGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Ficus\\Astral\\ficusGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Iris\\Astral\\irisGeneTrees_quartetScore.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Mammals\\Astral\\mammalsGeneTrees_quartet.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primates\\Astral\\primateGeneTrees_quartetScore_collapsed.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primates\\Astral\\primateGeneTrees_quartetScore_collapsed.tre")
tree<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primates\\Astral\\primateGeneTrees_quartetScore_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Primula\\Astral\\primulaGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Ranunculus\\Astral\\ranunculusGeneTrees_quartetScores_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Rhododendron\\Astral\\rhododendronGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Rosaceae\\Astral\\rosaceaeGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Scincids\\Astral\\scincidsGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Solanum\\Astral\\solanumGeneTrees_quartetScore_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\Syzygium\\Astral\\syzygiumGeneTrees_quartetScores_noQuestionMarks_collapsed.tre")
tree<-unroot.phylo(tree)
tree
exit
quit()
#library(devtools)
#install_github("thackl/thacklr")
#install_github("anaserrasilva/islandNeighbours")
library(islandNeighbours) #can use library(ape) instead
tree<-read.tree(D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_w16SHmont\\strict.tre)
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_w16SHmont\\strict.tre")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\strict.tre")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\wHmont_quartet_rootedCollapsed.newick.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\wHmont_quartet_rootedCollapsed.newick.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_w16SHmont\\input\\wHmont_quartet_rootedCollapsed.newick.tre")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\noHmont_quartet_rootedCollapsed.newick.tre")
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\noHmont_quartet_rootedCollapsednoQs.newick.tre")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_w16SHmont\\strict.tre")
tree
q()
library(islandNeighbours)
tree <- read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_w16SHmont\\input\\wHmont_quartet_rootedCollapsed.newick.tre")
tree
tree <- read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\noHmont_quartet_rootedCollapsedNoQs.newick.tre")
tree <- read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\noHmont_quartet_rootedCollapsedNoQs.newick.tre")
tree <- read.nexus("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\GymnoTree_2022-03-15\\terraphy_Bayes\\ST_no16SHmont\\input\\noHmont_quartet_rootedCollapsedNoQs.newick.tre")
tree
q()
library(islandNeighbours)
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\data.sets-master\\Solanum\\terraphy\\input\\Solan.tree.with.outgroup")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\data.sets-master\\Rosaceae\\terraphy\\input\\rosaceae.nwk")
tree
tree<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Concatabominations\\coverageDensityComparison\\Dobrin_etal_2018\\data.sets-master\\Primula\\terraphy\\input\\Primula_plus.nwk")
tree
q()
library(islandNeighbours)
trees<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Pardo\\PAUP\\Pardo_fullmatrix\\mytrees.tre")
#trees <- read.tree("mytrees.tre")
trees <- unroot.multiPhylo(trees)
length(trees)
allTrees<-length(trees)
class(allTrees)
trees[[1]]$tip.label
length(trees[[1]])
length(trees[[1]]$tip.label)
#remove 'Chinlestegophis' from all trees
trees <- drop.tip.multiPhylo(trees, "Chinlestegophis_jenkinsi")
length(trees[[1]]$tip.label)
trees
trees<-unique.multiPhylo(trees)
trees
trees[[1]]$tip.label
trees[[1]]
?unique.multiPhylo
q()
library(islandNeighbours)
trees<-("D:\\Documents\\HigherEducation\\PhD\\Pardo\\MrBayes\\MrBayes_Partitioned_islands\\PardoCharacters.nex.trprobs")
tree<-trees
tree<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Pardo\\MrBayes\\MrBayes_Partitioned_islands\\PardoCharacters.nex.trprobs")
threshold=2
tree <- ape::unroot.multiPhylo(tree)
l <- length(tree)
x <- threshold
m <- rwty::tree.dist.matrix(tree)
mat<-m
mat[1:10,1:10]
islands=list()
if (any(mat == -1)){
mat[mat == -1] = NA
}
counter = 1 + length(islands)
#extract singleton islands
u = list()
for (y in 1:l) {
if (length(which(mat[y,] <= x)) == 1){
islands[[counter]] <- phytools::as.multiPhylo(tree[[y]])
u[counter] <- as.numeric(y)
counter = counter + 1
}
}
islands
if (length(u) != 0) {
tree <- tree[-c(as.numeric(u))]
l <- length(tree)
mat <- mat[-c(as.numeric(u)),-c(as.numeric(u))]
rownames(mat) <- c(1:l)
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- mat[mat[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- mat[mat[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- mat[mat[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
verbose = TRUE
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- mat[mat[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- mat[mat[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
#extract singleton islands
u = list()
for (y in 1:l) {
if (length(which(mat[y,] <= x)) == 1){
islands[[counter]] <- phytools::as.multiPhylo(tree[[y]])
u[counter] <- as.numeric(y)
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(u))]
l <- length(tree)
mat <- mat[-c(as.numeric(u)),-c(as.numeric(u))]
rownames(mat) <- c(1:l)
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- mat[mat[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- mat[mat[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- mat[mat[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
tree<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Pardo\\MrBayes\\MrBayes_Partitioned_islands\\PardoCharacters.nex.trprobs")
mat <- rwty::tree.dist.matrix(tree)
trees <- unroot.multiPhylo(trees)
length(trees)
tree<-unroot.multiPhylo(tree)
l<-length(tree)
mat[1:10,1:10]
islands=list()
counter = 1 + length(islands)
#extract singleton islands
u = list()
for (y in 1:l) {
if (length(which(mat[y,] <= x)) == 1){
islands[[counter]] <- phytools::as.multiPhylo(tree[[y]])
u[counter] <- as.numeric(y)
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(u))]
l <- length(tree)
mat <- mat[-c(as.numeric(u)),-c(as.numeric(u))]
rownames(mat) <- c(1:l)
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- mat[mat[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- mat[mat[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- mat[mat[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
#counter = counter + 1
mat <- mat[-c(as.numeric(r)),-c(as.numeric(r))]
mat[1:10,1:10]
#extract singleton islands
u = list()
for (y in 1:l) {
if (length(which(mat[y,] <= x)) == 1){
islands[[counter]] <- phytools::as.multiPhylo(tree[[y]])
u[counter] <- as.numeric(y)
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(u))]
l <- length(tree)
mat <- mat[-c(as.numeric(u)),-c(as.numeric(u))]
rownames(mat) <- c(1:l)
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- mat[mat[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- mat[mat[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- mat[mat[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
library(devtools)
install_github("lfabreti/convenience")
library(convenience)
install.packages(c("ade4", "adegenet", "ape", "aplot", "arkdb", "available", "BAMMtools", "BBmisc", "bbmle", "bdsmatrix", "bigmemory", "BiocManager", "BiodiversityR", "blob", "bookdown", "brew", "broom", "bslib", "callr", "car", "caret", "checkmate", "checkpoint", "classInt", "cli", "clipr", "clue", "cluster", "colorRamps", "colorspace", "commonmark", "conquer", "corHMM", "crayon", "DBI", "dbplyr", "deeptime", "DEoptimR", "desc", "deSolve", "devtools", "dichromat", "dismo", "doParallel", "doSNOW", "dplyr", "DT", "duckdb", "e1071", "effects", "ellipse", "estimability", "evaluate", "fansi", "farver", "fields", "filehash", "FNN", "fontawesome", "foreach", "formatR", "future", "future.apply", "gdata", "gdtools", "geiger", "generics", "geojsonsf", "geometry", "geomorph", "geoscale", "gert", "ggdendro", "ggfun", "ggimage", "ggnewscale", "ggplot2", "ggpp", "git2r", "globals", "glue", "gmodels", "gmp", "googleVis", "gower", "gplots", "gstat", "gtools", "haven", "Hmisc", "htmlTable", "htmltools", "httr", "igraph", "insight", "interp", "ipred", "iterators", "jqr", "jsonlite", "kernlab", "knitr", "latticeExtra", "leafem", "leaflet", "lhs", "linprog", "lme4", "lmtest", "locfit", "Luminescence", "magic", "magrittr", "maptools", "mapview", "MASS", "mathjaxr", "Matrix", "matrixStats", "mclust", "mgcv", "mi", "minpack.lm", "mnormt", "multcomp", "mvMORPH", "ncbit", "nlme", "nloptr", "openssl", "osmdata", "ouch", "packrat", "paleotree", "parallelly", "ParamHelpers", "pbmcapply", "permute", "phangorn", "phytools", "pillar", "pkgcache", "pkgdepends", "pkgload", "PKI", "plyr", "polynom", "processx", "progressr", "protoclust", "proxy", "ps", "quantreg", "Quartet", "R.cache", "R.methodsS3", "R.oo", "R.utils", "ranger", "raster", "rbibutils", "RCarb", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reshape", "reticulate", "Rfast", "rfigshare", "rgdal", "rgenoud", "rgl", "rgrass7", "rjags", "rlang", "RLumModel", "RLumShiny", "rmapshaper", "rmarkdown", "Rmpfr", "rncl", "RNeXML", "robustbase", "Rogue", "roxygen2", "rpart", "RPostgres", "rprojroot", "RRPP", "rsconnect", "RSpectra", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "sem", "seqinr", "sf", "shiny", "shinyBS", "sp", "spacetime", "spam", "spdep", "stars", "stplanr", "strap", "stringi", "subplex", "survival", "svglite", "systemfonts", "Ternary", "terra", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "tidytree", "tidyverse", "timeDate", "tinytex", "tmap", "tree", "TreeDist", "TreeSearch", "TreeTools", "tzdb", "units", "usethis", "uuid", "V8", "vctrs", "vegan", "waldo", "webshot", "withr", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "adegenet", "ape", "aplot", "arkdb", "available", "BAMMtools", "BBmisc", "bbmle", "bdsmatrix", "bigmemory", "BiocManager", "BiodiversityR", "blob", "bookdown", "brew", "broom", "bslib", "callr", "car", "caret", "checkmate", "checkpoint", "classInt", "cli", "clipr", "clue", "cluster", "colorRamps", "colorspace", "commonmark", "conquer", "corHMM", "crayon", "DBI", "dbplyr", "deeptime", "DEoptimR", "desc", "deSolve", "devtools", "dichromat", "dismo", "doParallel", "doSNOW", "dplyr", "DT", "duckdb", "e1071", "effects", "ellipse", "estimability", "evaluate", "fansi", "farver", "fields", "filehash", "FNN", "fontawesome", "foreach", "formatR", "future", "future.apply", "gdata", "gdtools", "geiger", "generics", "geojsonsf", "geometry", "geomorph", "geoscale", "gert", "ggdendro", "ggfun", "ggimage", "ggnewscale", "ggplot2", "ggpp", "git2r", "globals", "glue", "gmodels", "gmp", "googleVis", "gower", "gplots", "gstat", "gtools", "haven", "Hmisc", "htmlTable", "htmltools", "httr", "igraph", "insight", "interp", "ipred", "iterators", "jqr", "jsonlite", "kernlab", "knitr", "latticeExtra", "leafem", "leaflet", "lhs", "linprog", "lme4", "lmtest", "locfit", "Luminescence", "magic", "magrittr", "maptools", "mapview", "MASS", "mathjaxr", "Matrix", "matrixStats", "mclust", "mgcv", "mi", "minpack.lm", "mnormt", "multcomp", "mvMORPH", "ncbit", "nlme", "nloptr", "openssl", "osmdata", "ouch", "packrat", "paleotree", "parallelly", "ParamHelpers", "pbmcapply", "permute", "phangorn", "phytools", "pillar", "pkgcache", "pkgdepends", "pkgload", "PKI", "plyr", "polynom", "processx", "progressr", "protoclust", "proxy", "ps", "quantreg", "Quartet", "R.cache", "R.methodsS3", "R.oo", "R.utils", "ranger", "raster", "rbibutils", "RCarb", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reshape", "reticulate", "Rfast", "rfigshare", "rgdal", "rgenoud", "rgl", "rgrass7", "rjags", "rlang", "RLumModel", "RLumShiny", "rmapshaper", "rmarkdown", "Rmpfr", "rncl", "RNeXML", "robustbase", "Rogue", "roxygen2", "rpart", "RPostgres", "rprojroot", "RRPP", "rsconnect", "RSpectra", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "sem", "seqinr", "sf", "shiny", "shinyBS", "sp", "spacetime", "spam", "spdep", "stars", "stplanr", "strap", "stringi", "subplex", "survival", "svglite", "systemfonts", "Ternary", "terra", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "tidytree", "tidyverse", "timeDate", "tinytex", "tmap", "tree", "TreeDist", "TreeSearch", "TreeTools", "tzdb", "units", "usethis", "uuid", "V8", "vctrs", "vegan", "waldo", "webshot", "withr", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "adegenet", "ape", "aplot", "arkdb", "available", "BAMMtools", "BBmisc", "bbmle", "bdsmatrix", "bigmemory", "BiocManager", "BiodiversityR", "blob", "bookdown", "brew", "broom", "bslib", "callr", "car", "caret", "checkmate", "checkpoint", "classInt", "cli", "clipr", "clue", "cluster", "colorRamps", "colorspace", "commonmark", "conquer", "corHMM", "crayon", "DBI", "dbplyr", "deeptime", "DEoptimR", "desc", "deSolve", "devtools", "dichromat", "dismo", "doParallel", "doSNOW", "dplyr", "DT", "duckdb", "e1071", "effects", "ellipse", "estimability", "evaluate", "fansi", "farver", "fields", "filehash", "FNN", "fontawesome", "foreach", "formatR", "future", "future.apply", "gdata", "gdtools", "geiger", "generics", "geojsonsf", "geometry", "geomorph", "geoscale", "gert", "ggdendro", "ggfun", "ggimage", "ggnewscale", "ggplot2", "ggpp", "git2r", "globals", "glue", "gmodels", "gmp", "googleVis", "gower", "gplots", "gstat", "gtools", "haven", "Hmisc", "htmlTable", "htmltools", "httr", "igraph", "insight", "interp", "ipred", "iterators", "jqr", "jsonlite", "kernlab", "knitr", "latticeExtra", "leafem", "leaflet", "lhs", "linprog", "lme4", "lmtest", "locfit", "Luminescence", "magic", "magrittr", "maptools", "mapview", "MASS", "mathjaxr", "Matrix", "matrixStats", "mclust", "mgcv", "mi", "minpack.lm", "mnormt", "multcomp", "mvMORPH", "ncbit", "nlme", "nloptr", "openssl", "osmdata", "ouch", "packrat", "paleotree", "parallelly", "ParamHelpers", "pbmcapply", "permute", "phangorn", "phytools", "pillar", "pkgcache", "pkgdepends", "pkgload", "PKI", "plyr", "polynom", "processx", "progressr", "protoclust", "proxy", "ps", "quantreg", "Quartet", "R.cache", "R.methodsS3", "R.oo", "R.utils", "ranger", "raster", "rbibutils", "RCarb", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reshape", "reticulate", "Rfast", "rfigshare", "rgdal", "rgenoud", "rgl", "rgrass7", "rjags", "rlang", "RLumModel", "RLumShiny", "rmapshaper", "rmarkdown", "Rmpfr", "rncl", "RNeXML", "robustbase", "Rogue", "roxygen2", "rpart", "RPostgres", "rprojroot", "RRPP", "rsconnect", "RSpectra", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "sem", "seqinr", "sf", "shiny", "shinyBS", "sp", "spacetime", "spam", "spdep", "stars", "stplanr", "strap", "stringi", "subplex", "survival", "svglite", "systemfonts", "Ternary", "terra", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "tidytree", "tidyverse", "timeDate", "tinytex", "tmap", "tree", "TreeDist", "TreeSearch", "TreeTools", "tzdb", "units", "usethis", "uuid", "V8", "vctrs", "vegan", "waldo", "webshot", "withr", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
install.packages(c("ade4", "adegenet", "ape", "aplot", "arkdb", "available", "BAMMtools", "BBmisc", "bbmle", "bdsmatrix", "bigmemory", "BiocManager", "BiodiversityR", "blob", "bookdown", "brew", "broom", "bslib", "callr", "car", "caret", "checkmate", "checkpoint", "classInt", "cli", "clipr", "clue", "cluster", "colorRamps", "colorspace", "commonmark", "conquer", "corHMM", "crayon", "DBI", "dbplyr", "deeptime", "DEoptimR", "desc", "deSolve", "devtools", "dichromat", "dismo", "doParallel", "doSNOW", "dplyr", "DT", "duckdb", "e1071", "effects", "ellipse", "estimability", "evaluate", "fansi", "farver", "fields", "filehash", "FNN", "fontawesome", "foreach", "formatR", "future", "future.apply", "gdata", "gdtools", "geiger", "generics", "geojsonsf", "geometry", "geomorph", "geoscale", "gert", "ggdendro", "ggfun", "ggimage", "ggnewscale", "ggplot2", "ggpp", "git2r", "globals", "glue", "gmodels", "gmp", "googleVis", "gower", "gplots", "gstat", "gtools", "haven", "Hmisc", "htmlTable", "htmltools", "httr", "igraph", "insight", "interp", "ipred", "iterators", "jqr", "jsonlite", "kernlab", "knitr", "latticeExtra", "leafem", "leaflet", "lhs", "linprog", "lme4", "lmtest", "locfit", "Luminescence", "magic", "magrittr", "maptools", "mapview", "MASS", "mathjaxr", "Matrix", "matrixStats", "mclust", "mgcv", "mi", "minpack.lm", "mnormt", "multcomp", "mvMORPH", "ncbit", "nlme", "nloptr", "openssl", "osmdata", "ouch", "packrat", "paleotree", "parallelly", "ParamHelpers", "pbmcapply", "permute", "phangorn", "phytools", "pillar", "pkgcache", "pkgdepends", "pkgload", "PKI", "plyr", "polynom", "processx", "progressr", "protoclust", "proxy", "ps", "quantreg", "Quartet", "R.cache", "R.methodsS3", "R.oo", "R.utils", "ranger", "raster", "rbibutils", "RCarb", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "RCurl", "Rdpack", "readr", "readxl", "recipes", "reshape", "reticulate", "Rfast", "rfigshare", "rgdal", "rgenoud", "rgl", "rgrass7", "rjags", "rlang", "RLumModel", "RLumShiny", "rmapshaper", "rmarkdown", "Rmpfr", "rncl", "RNeXML", "robustbase", "Rogue", "roxygen2", "rpart", "RPostgres", "rprojroot", "RRPP", "rsconnect", "RSpectra", "RSQLite", "Rvcg", "s2", "sandwich", "sass", "scales", "segmented", "sem", "seqinr", "sf", "shiny", "shinyBS", "sp", "spacetime", "spam", "spdep", "stars", "stplanr", "strap", "stringi", "subplex", "survival", "svglite", "systemfonts", "Ternary", "terra", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "tidytree", "tidyverse", "timeDate", "tinytex", "tmap", "tree", "TreeDist", "TreeSearch", "TreeTools", "tzdb", "units", "usethis", "uuid", "V8", "vctrs", "vegan", "waldo", "webshot", "withr", "xfun", "XML", "yaml", "yulab.utils", "zoo"))
library(convenience)
?updateR
??updateR
??gmyc
#library(devtools)
#install_github("thackl/thacklr")
#install_github("anaserrasilva/islandNeighbours")
library(islandNeighbours) #can use library(ape) instead
library(TreeTools)
kligman <- ReadCharacters("D:\\Documents\\HigherEducation\\PhD\\Pardo\\Kligman_etal_2022\\Triassic stem caecilian supports dissorophoid origin of living amphibians_morphobank\\KligmanCharacters.nex")
kligman
kligman <- ReadCharacters("D:\\Documents\\HigherEducation\\PhD\\Pardo\\Kligman_etal_2022\\Triassic stem caecilian supports dissorophoid origin of living amphibians_morphobank\\KligmanCharacters.nex")
kligman
kligman[,239]
unique(kligman[,239])
unique(kligman[,274])
unique(kligman[,314])
unique(kligman[,316])
unique(kligman[,318])
unique(kligman[,323])
unique(kligman[,324])
unique(kligman[,339])
PardoMRC<-read.tree("D:\\Documents\\HigherEducation\\PhD\\Pardo\\PAUP\\Pardo_fullmatrix\\myMJConsensustree.tre")
PardoMRC<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Pardo\\PAUP\\Pardo_fullmatrix\\myMJConsensustree.tre")
PardoMRC
PardoBayes<-read.nexus("D:\\Documents\\HigherEducation\\PhD\\Pardo\\MrBayes\\MrBayes_Pardo\\PardoCharacters.nex.con.tre")
PardoBayes
RobinsonFoulds(PardoMRC,PardoBayes)
RawSymmetricDifference(PardoMRC,PardoBayes)
?RawSymmetricDifference
MRCs<-as.multiPhylo(c(PardoMRC,PardoBayes))
MRCs<-c(PardoMRC,PardoBayes)
MRCs
plot(MRCs)
RawSymmetricDifference(MRCs)
tree.dist.matrix(MRCs)
?tree.dist.matrix
19/74
71/74
gc()
q()
library(tidyverse)
storms
colnames(storms)
fct_infreq(storms$year)
?fct_infreq
fct_infreq(storms$year, levels=unique(storms$year))
f <- factor(stroms$year)
f <- factor(storms$year)
f
fct_infreq(f)
fct_count(f)
sort(fct_count(f))
q()
library(devtools)
library(thacklr)
library(devtools)
setwd("D:\\Documents\\GitHub\\islandNeighbours")
build()
setwd("D:\\Documents\\GitHub\\islandNeighbours\\islandNeighbours")
build()
install()
quit()

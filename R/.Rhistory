}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
tree <- tree[-c(as.numeric(sort(c(r,u))]
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
l <- length(tree)
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[row,] <= x) == 1)) {
islands[[counter]] <- phytools::as.Phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
isles<-xRFislandsTEST(ts,2, output = list(), check.unique = F)
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
l <- length(tree)
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- phytools::as.Phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
isles<-xRFislandsTEST(ts,2, output = list(), check.unique = F)
?as.phylo
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
l <- length(tree)
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
isles<-xRFislandsTEST(ts,2, output = list(), check.unique = F)
isles
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
if (length(u) != 0) {
}
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
tree <- tree[-c(as.numeric(r)]
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
tree <- ape::unroot.multiPhylo(tree)
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
if (length(u) != 0) {
}
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
tree <- ape::unroot.multiPhylo(tree)
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(sort(u))]
}
l <- length(tree)
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
tree <- tree[-c(as.numeric(r)]
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
tree <- ape::unroot.multiPhylo(tree)
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(sort(u))]
}
l <- length(tree)
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
tree <- tree[-c(as.numeric(r)]
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
library(islandNeighbours)
ts
xRFislandsTEST <- function(tree, threshold, output = list(), verbose = TRUE, check.unique = TRUE) {
tree <- ape::unroot.multiPhylo(tree)
if (check.unique == TRUE) {
tree <- ape::unique.multiPhylo(tree)
}
x <- threshold
islands = output
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
u <- vector()
counter = 1 + length(islands)
#extract singleton islands
for (r in 1:nrow(m)) {
if (length(which(m[r,] <= x) == 1)) {
islands[[counter]] <- ape::as.phylo(tree[[r]])
u[counter] <- r
counter = counter + 1
}
}
if (length(u) != 0) {
tree <- tree[-c(as.numeric(sort(u))]
}
l <- length(tree)
m <- rwty::tree.dist.matrix(tree)
rownames(m) <- c(1:l)
#adding property, equivalent of colour in graph-based clustering approaches
p <- rep(c('a'), times = l)
p[1] <- 'b'
s <- m[m[1,] <= x,]
p[c( as.numeric(rownames(s)))] <- 'b'
for (k in 2:l) {
if (verbose == TRUE) {
print(paste("At tree", k, sep=' '))
}
if (p[k] == 'b') {
s <- m[m[k,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
#recover trees within threshold missed in first go around
for (i in 1:l) {
if (p[i] == 'b') {
s <- m[m[i,] <= x,]
p[c(as.numeric(rownames(s)))] <- 'b'
}
r <- c(which(p == 'b'))
t <- tree[c(as.numeric(r))]
}
}
if (length(t) != 1) {
t <- ape::unique.multiPhylo(thacklr::as.multiPhylo.list(t), use.edge.length = F)
}
islands[[counter]] <- t
if (length(t) != l) {
tree <- tree[-c(as.numeric(r)]
}
#to call recursive function
t2 <- tree
# if (length(t2) == 1) {
#   islands[[counter+1]] <- t2
#   return(islands)
# }
if (length(ape::unique.multiPhylo(c(t2,t), use.edge.length = F)) != length(t2)) {
xRFislands(tree, threshold, islands, check.unique = FALSE)
}
else {
return(islands)
}
}
